---
title: "Corporate Story"
author: "Noha Yousif"
format: 
  html:
    toc: true
    toc-title: "Table of Contents"
    embed-resources: true
    warnings: false
    code-fold: true
---

As we're doing for the nonprofit sector, we’ll put together a summary of the important metrics and statistics we think should be included in our dashboard, based on our analysis of SEC data from the corporate sector.

This will include both the data itself and some options for visualizing it.

We're working with two main SEC datasets:

1.  Numeric data (num.csv)—this includes information from the Balance Sheet, Income Statement, Cash Flows, Changes in Equity, and Comprehensive Income, plus any related footnotes.
2.  Submission data (sub.csv)—this contains text fields like company names, business addresses, and submission detail level.

For a deeper dive into these datasets and links to access them directly, check out this page: <https://theundivideproject.github.io/Financial-Data-Exploration/website/index.html>

```{=html}
<div class='tableauPlaceholder' id='viz1733440016889' style='position: relative'><noscript><a href='#'><img alt='Dashboard 1 ' src='https:&#47;&#47;public.tableau.com&#47;static&#47;images&#47;RX&#47;RXK5Q3TM2&#47;1_rss.png' style='border: none' /></a></noscript><object class='tableauViz'  style='display:none;'><param name='host_url' value='https%3A%2F%2Fpublic.tableau.com%2F' /> <param name='embed_code_version' value='3' /> <param name='path' value='views&#47;corporate-dashboard&#47;Dashboard1?:language=en-US&amp;:embed=true&amp;:sid=&amp;:redirect=auth' /> <param name='toolbar' value='yes' /><param name='static_image' value='https:&#47;&#47;public.tableau.com&#47;static&#47;images&#47;RX&#47;RXK5Q3TM2&#47;1.png' /> <param name='animate_transition' value='yes' /><param name='display_static_image' value='yes' /><param name='display_spinner' value='yes' /><param name='display_overlay' value='yes' /><param name='display_count' value='yes' /><param name='language' value='en-US' /></object></div>                <script type='text/javascript'>                    var divElement = document.getElementById('viz1733440016889');                    var vizElement = divElement.getElementsByTagName('object')[0];                    if ( divElement.offsetWidth > 800 ) { vizElement.style.width='827px';vizElement.style.height='1227px';} else if ( divElement.offsetWidth > 500 ) { vizElement.style.width='827px';vizElement.style.height='1227px';} else { vizElement.style.width='100%';vizElement.style.height='2277px';}                     var scriptElement = document.createElement('script');                    scriptElement.src = 'https://public.tableau.com/javascripts/api/viz_v1.js';                    vizElement.parentNode.insertBefore(scriptElement, vizElement);                </script>
```

------------------------------------------------------------------------

Looking to replicate this? Here is the code we used to process the raw SEC data before importing it into Tableau for the visualizations above.:

``` python
from IPython.display import display
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd

# prevent truncation of data
pd.set_option('display.max_rows', None)
pd.set_option('display.max_colwidth', None)

# data for jan (01) — nov (11) 2024 is downloaded from 'https://www.sec.gov/data-research/financial-statement-notes-data-sets'

# load submission data
subs = [
    pd.read_csv(f'financial statement and notes data sets (2024)/{str(i).zfill(2)}/sub.tsv', sep='\t', low_memory=False) 
    for i in range(1, 11)
]

# load tag data
tags = [
    pd.read_csv(f'financial statement and notes data sets (2024)/{str(i).zfill(2)}/tag.tsv', sep='\t', low_memory=False) 
    for i in range(1, 11)
]

# load numeric data
nums = [
    pd.read_csv(f'financial statement and notes data sets (2024)/{str(i).zfill(2)}/num.tsv', sep='\t', low_memory=False) 
    for i in range(1, 11)
]

# load textual data
txts = [
    pd.read_csv(f'financial statement and notes data sets (2024)/{str(i).zfill(2)}/txt.tsv', sep='\t', low_memory=False) 
    for i in range(1, 11)
]

# concatenate data
sub_2024 = pd.concat(subs, axis=0)
tag_2024 = pd.concat(tags, axis=0)
num_2024 = pd.concat(nums, axis=0)
txt_2024 = pd.concat(txts, axis=0)

# drop international data
sub_2024 = sub_2024[sub_2024['countryba'] == 'US']
num_2024 = num_2024[num_2024['adsh'].isin(sub_2024['adsh'])]
txt_2024 = txt_2024[txt_2024['adsh'].isin(sub_2024['adsh'])]

# drop duplicate data
sub_2024 = sub_2024.drop_duplicates(subset='adsh', keep='last')
tag_2024 = tag_2024.drop_duplicates(subset='tag', keep='last')
num_2024 = num_2024.drop_duplicates()
txt_2024 = txt_2024.drop_duplicates()

# drop abstract tags
tag_2024 = tag_2024[tag_2024['abstract'] == 0]

# sum values for entries w/ the same issuer and tag
num_2024 = num_2024.groupby(['adsh', 'tag'], as_index=False)['value'].sum()

# EJ-related numeric tags, identified from manual search of tag_2024['tag']
num_tags = ['PaymentsForEnvironmentalLiabilities', 'LiabilityForAsbestosAndEnvironmentalClaimsGrossPaymentForClaims',
'AccrualForEnvironmentalLossContingencies', 'AmountCommittedForFundingSocialAndInfrastructureImprovementProjects', 
'CharitableContributions', 'Revenues']

# show stats for each EJ-related numeric tag
for num_tag in num_tags:
    print(num_tag)
    display(num_2024[num_2024['tag'] == num_tag].describe())
    
# merge data corresponding to num_tags w/ submission data and save as csv
data = num_2024[num_2024['tag'].isin(num_tags)].merge(sub_2024, on='adsh', how='left')
data.to_csv('data.csv', index=False)
```
